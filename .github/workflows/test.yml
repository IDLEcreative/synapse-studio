name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run formatting check
        run: npm run format -- --check

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Run unit and integration tests
        run: npm run test:ci
        env:
          # Mock environment variables for testing
          NEXT_PUBLIC_SUPABASE_URL: https://test.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key
          NEXT_PUBLIC_UPLOADTHING_APP_ID: test-app-id
          FAL_KEY: test-fal-key
          SUPABASE_SERVICE_ROLE_KEY: test-service-role-key
          UPLOADTHING_SECRET: test-uploadthing-secret
          NEXTAUTH_SECRET: test-auth-secret
          NEXTAUTH_URL: http://localhost:3000

      - name: Upload coverage reports
        if: matrix.node-version == 20
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unit-tests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Archive test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            coverage/
            test-results/
          retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium firefox webkit

      - name: Build application
        run: npm run build
        env:
          # Mock environment variables for build
          NEXT_PUBLIC_SUPABASE_URL: https://test.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key
          NEXT_PUBLIC_UPLOADTHING_APP_ID: test-app-id
          FAL_KEY: test-fal-key
          SUPABASE_SERVICE_ROLE_KEY: test-service-role-key
          UPLOADTHING_SECRET: test-uploadthing-secret
          NEXTAUTH_SECRET: test-auth-secret
          NEXTAUTH_URL: http://localhost:3000

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          # Test environment variables
          NEXT_PUBLIC_SUPABASE_URL: https://test.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key
          NEXT_PUBLIC_UPLOADTHING_APP_ID: test-app-id
          FAL_KEY: test-fal-key
          SUPABASE_SERVICE_ROLE_KEY: test-service-role-key
          UPLOADTHING_SECRET: test-uploadthing-secret
          NEXTAUTH_SECRET: test-auth-secret
          NEXTAUTH_URL: http://localhost:3000

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

      - name: Upload Playwright trace
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: test-results/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run dependency vulnerability scan
        run: npx audit-ci --moderate

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          # Mock environment variables for build
          NEXT_PUBLIC_SUPABASE_URL: https://test.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key
          NEXT_PUBLIC_UPLOADTHING_APP_ID: test-app-id
          FAL_KEY: test-fal-key
          SUPABASE_SERVICE_ROLE_KEY: test-service-role-key
          UPLOADTHING_SECRET: test-uploadthing-secret
          NEXTAUTH_SECRET: test-auth-secret
          NEXTAUTH_URL: http://localhost:3000

      - name: Test production server start
        run: |
          npm start &
          PID=$!
          sleep 10
          curl -f http://localhost:3000/api/health || exit 1
          kill $PID
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://test.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key
          NEXT_PUBLIC_UPLOADTHING_APP_ID: test-app-id
          FAL_KEY: test-fal-key
          SUPABASE_SERVICE_ROLE_KEY: test-service-role-key
          UPLOADTHING_SECRET: test-uploadthing-secret
          NEXTAUTH_SECRET: test-auth-secret
          NEXTAUTH_URL: http://localhost:3000

  # Consolidate results
  test-results:
    name: Test Results
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, security-scan, build-test]
    if: always()

    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.unit-tests.result }}" == "failure" ]]; then
            echo "Unit tests failed"
            exit 1
          fi
          if [[ "${{ needs.e2e-tests.result }}" == "failure" ]]; then
            echo "E2E tests failed"
            exit 1
          fi
          if [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "Security scan failed"
            exit 1
          fi
          if [[ "${{ needs.build-test.result }}" == "failure" ]]; then
            echo "Build test failed"
            exit 1
          fi
          echo "All tests passed!"

      - name: Update commit status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: statuses } = await github.rest.repos.listCommitStatusesForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha
            });
            
            const testsPassed = [
              '${{ needs.unit-tests.result }}',
              '${{ needs.e2e-tests.result }}',
              '${{ needs.security-scan.result }}',
              '${{ needs.build-test.result }}'
            ].every(result => result === 'success');
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: testsPassed ? 'success' : 'failure',
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: testsPassed ? 'All tests passed' : 'Some tests failed',
              context: 'ci/tests'
            });

# Optional: Add deployment job that runs only after successful tests
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test-results]
    if: github.event_name == 'pull_request' && needs.test-results.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for preview
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://test.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test-anon-key
          NEXT_PUBLIC_UPLOADTHING_APP_ID: test-app-id
          
      - name: Comment deployment URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => 
              comment.user?.login === 'github-actions[bot]' && 
              comment.body?.includes('ðŸš€ Preview deployment')
            );
            
            const commentBody = `ðŸš€ Preview deployment is ready!
            
            - **Build**: âœ… Successful
            - **Tests**: âœ… All passed
            - **Security**: âœ… No issues found
            
            View the deployment at: [Preview URL](https://your-preview-url.com)
            
            <details>
            <summary>Test Coverage</summary>
            
            Unit Tests: âœ… Passed
            Integration Tests: âœ… Passed  
            E2E Tests: âœ… Passed
            Security Scan: âœ… Passed
            
            </details>`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }